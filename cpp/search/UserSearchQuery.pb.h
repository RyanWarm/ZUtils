// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserSearchQuery.proto

#ifndef PROTOBUF_UserSearchQuery_2eproto__INCLUDED
#define PROTOBUF_UserSearchQuery_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace user_search {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_UserSearchQuery_2eproto();
void protobuf_AssignDesc_UserSearchQuery_2eproto();
void protobuf_ShutdownFile_UserSearchQuery_2eproto();

class PbUserSearchQuery;
class PbUserSearchQuery_TermExpansion;
class PbUserSearchQuery_LinkDistanceFilter;

// ===================================================================

class PbUserSearchQuery_TermExpansion : public ::google::protobuf::Message {
 public:
  PbUserSearchQuery_TermExpansion();
  virtual ~PbUserSearchQuery_TermExpansion();
  
  PbUserSearchQuery_TermExpansion(const PbUserSearchQuery_TermExpansion& from);
  
  inline PbUserSearchQuery_TermExpansion& operator=(const PbUserSearchQuery_TermExpansion& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PbUserSearchQuery_TermExpansion& default_instance();
  
  void Swap(PbUserSearchQuery_TermExpansion* other);
  
  // implements Message ----------------------------------------------
  
  PbUserSearchQuery_TermExpansion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbUserSearchQuery_TermExpansion& from);
  void MergeFrom(const PbUserSearchQuery_TermExpansion& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes term = 1;
  inline bool has_term() const;
  inline void clear_term();
  static const int kTermFieldNumber = 1;
  inline const ::std::string& term() const;
  inline void set_term(const ::std::string& value);
  inline void set_term(const char* value);
  inline void set_term(const void* value, size_t size);
  inline ::std::string* mutable_term();
  inline ::std::string* release_term();
  
  // repeated bytes eterm = 2;
  inline int eterm_size() const;
  inline void clear_eterm();
  static const int kEtermFieldNumber = 2;
  inline const ::std::string& eterm(int index) const;
  inline ::std::string* mutable_eterm(int index);
  inline void set_eterm(int index, const ::std::string& value);
  inline void set_eterm(int index, const char* value);
  inline void set_eterm(int index, const void* value, size_t size);
  inline ::std::string* add_eterm();
  inline void add_eterm(const ::std::string& value);
  inline void add_eterm(const char* value);
  inline void add_eterm(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& eterm() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_eterm();
  
  // @@protoc_insertion_point(class_scope:user_search.PbUserSearchQuery.TermExpansion)
 private:
  inline void set_has_term();
  inline void clear_has_term();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* term_;
  ::google::protobuf::RepeatedPtrField< ::std::string> eterm_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_UserSearchQuery_2eproto();
  friend void protobuf_AssignDesc_UserSearchQuery_2eproto();
  friend void protobuf_ShutdownFile_UserSearchQuery_2eproto();
  
  void InitAsDefaultInstance();
  static PbUserSearchQuery_TermExpansion* default_instance_;
};
// -------------------------------------------------------------------

class PbUserSearchQuery_LinkDistanceFilter : public ::google::protobuf::Message {
 public:
  PbUserSearchQuery_LinkDistanceFilter();
  virtual ~PbUserSearchQuery_LinkDistanceFilter();
  
  PbUserSearchQuery_LinkDistanceFilter(const PbUserSearchQuery_LinkDistanceFilter& from);
  
  inline PbUserSearchQuery_LinkDistanceFilter& operator=(const PbUserSearchQuery_LinkDistanceFilter& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PbUserSearchQuery_LinkDistanceFilter& default_instance();
  
  void Swap(PbUserSearchQuery_LinkDistanceFilter* other);
  
  // implements Message ----------------------------------------------
  
  PbUserSearchQuery_LinkDistanceFilter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbUserSearchQuery_LinkDistanceFilter& from);
  void MergeFrom(const PbUserSearchQuery_LinkDistanceFilter& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool link_1du = 1;
  inline bool has_link_1du() const;
  inline void clear_link_1du();
  static const int kLink1DuFieldNumber = 1;
  inline bool link_1du() const;
  inline void set_link_1du(bool value);
  
  // optional bool link_2du = 2;
  inline bool has_link_2du() const;
  inline void clear_link_2du();
  static const int kLink2DuFieldNumber = 2;
  inline bool link_2du() const;
  inline void set_link_2du(bool value);
  
  // optional bool link_xdu = 3;
  inline bool has_link_xdu() const;
  inline void clear_link_xdu();
  static const int kLinkXduFieldNumber = 3;
  inline bool link_xdu() const;
  inline void set_link_xdu(bool value);
  
  // @@protoc_insertion_point(class_scope:user_search.PbUserSearchQuery.LinkDistanceFilter)
 private:
  inline void set_has_link_1du();
  inline void clear_has_link_1du();
  inline void set_has_link_2du();
  inline void clear_has_link_2du();
  inline void set_has_link_xdu();
  inline void clear_has_link_xdu();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool link_1du_;
  bool link_2du_;
  bool link_xdu_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_UserSearchQuery_2eproto();
  friend void protobuf_AssignDesc_UserSearchQuery_2eproto();
  friend void protobuf_ShutdownFile_UserSearchQuery_2eproto();
  
  void InitAsDefaultInstance();
  static PbUserSearchQuery_LinkDistanceFilter* default_instance_;
};
// -------------------------------------------------------------------

class PbUserSearchQuery : public ::google::protobuf::Message {
 public:
  PbUserSearchQuery();
  virtual ~PbUserSearchQuery();
  
  PbUserSearchQuery(const PbUserSearchQuery& from);
  
  inline PbUserSearchQuery& operator=(const PbUserSearchQuery& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PbUserSearchQuery& default_instance();
  
  void Swap(PbUserSearchQuery* other);
  
  // implements Message ----------------------------------------------
  
  PbUserSearchQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PbUserSearchQuery& from);
  void MergeFrom(const PbUserSearchQuery& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PbUserSearchQuery_TermExpansion TermExpansion;
  typedef PbUserSearchQuery_LinkDistanceFilter LinkDistanceFilter;
  
  // accessors -------------------------------------------------------
  
  // optional int32 offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  inline ::google::protobuf::int32 offset() const;
  inline void set_offset(::google::protobuf::int32 value);
  
  // optional int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);
  
  // required bytes xapian_query_blob = 3;
  inline bool has_xapian_query_blob() const;
  inline void clear_xapian_query_blob();
  static const int kXapianQueryBlobFieldNumber = 3;
  inline const ::std::string& xapian_query_blob() const;
  inline void set_xapian_query_blob(const ::std::string& value);
  inline void set_xapian_query_blob(const char* value);
  inline void set_xapian_query_blob(const void* value, size_t size);
  inline ::std::string* mutable_xapian_query_blob();
  inline ::std::string* release_xapian_query_blob();
  
  // optional int64 searcher_uid = 5;
  inline bool has_searcher_uid() const;
  inline void clear_searcher_uid();
  static const int kSearcherUidFieldNumber = 5;
  inline ::google::protobuf::int64 searcher_uid() const;
  inline void set_searcher_uid(::google::protobuf::int64 value);
  
  // repeated int64 d1_uid = 6;
  inline int d1_uid_size() const;
  inline void clear_d1_uid();
  static const int kD1UidFieldNumber = 6;
  inline ::google::protobuf::int64 d1_uid(int index) const;
  inline void set_d1_uid(int index, ::google::protobuf::int64 value);
  inline void add_d1_uid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      d1_uid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_d1_uid();
  
  // repeated int64 d2_uid = 7;
  inline int d2_uid_size() const;
  inline void clear_d2_uid();
  static const int kD2UidFieldNumber = 7;
  inline ::google::protobuf::int64 d2_uid(int index) const;
  inline void set_d2_uid(int index, ::google::protobuf::int64 value);
  inline void add_d2_uid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      d2_uid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_d2_uid();
  
  // repeated .user_search.PbUserSearchQuery.TermExpansion te = 8;
  inline int te_size() const;
  inline void clear_te();
  static const int kTeFieldNumber = 8;
  inline const ::user_search::PbUserSearchQuery_TermExpansion& te(int index) const;
  inline ::user_search::PbUserSearchQuery_TermExpansion* mutable_te(int index);
  inline ::user_search::PbUserSearchQuery_TermExpansion* add_te();
  inline const ::google::protobuf::RepeatedPtrField< ::user_search::PbUserSearchQuery_TermExpansion >&
      te() const;
  inline ::google::protobuf::RepeatedPtrField< ::user_search::PbUserSearchQuery_TermExpansion >*
      mutable_te();
  
  // optional int32 search_type = 9;
  inline bool has_search_type() const;
  inline void clear_search_type();
  static const int kSearchTypeFieldNumber = 9;
  inline ::google::protobuf::int32 search_type() const;
  inline void set_search_type(::google::protobuf::int32 value);
  
  // optional .user_search.PbUserSearchQuery.LinkDistanceFilter link_distance_filter = 10;
  inline bool has_link_distance_filter() const;
  inline void clear_link_distance_filter();
  static const int kLinkDistanceFilterFieldNumber = 10;
  inline const ::user_search::PbUserSearchQuery_LinkDistanceFilter& link_distance_filter() const;
  inline ::user_search::PbUserSearchQuery_LinkDistanceFilter* mutable_link_distance_filter();
  inline ::user_search::PbUserSearchQuery_LinkDistanceFilter* release_link_distance_filter();
  
  // repeated uint64 stats_com_term = 13;
  inline int stats_com_term_size() const;
  inline void clear_stats_com_term();
  static const int kStatsComTermFieldNumber = 13;
  inline ::google::protobuf::uint64 stats_com_term(int index) const;
  inline void set_stats_com_term(int index, ::google::protobuf::uint64 value);
  inline void add_stats_com_term(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      stats_com_term() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_stats_com_term();
  
  // repeated uint64 stats_job_term = 14;
  inline int stats_job_term_size() const;
  inline void clear_stats_job_term();
  static const int kStatsJobTermFieldNumber = 14;
  inline ::google::protobuf::uint64 stats_job_term(int index) const;
  inline void set_stats_job_term(int index, ::google::protobuf::uint64 value);
  inline void add_stats_job_term(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      stats_job_term() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_stats_job_term();
  
  // repeated uint64 stats_tag_term = 15;
  inline int stats_tag_term_size() const;
  inline void clear_stats_tag_term();
  static const int kStatsTagTermFieldNumber = 15;
  inline ::google::protobuf::uint64 stats_tag_term(int index) const;
  inline void set_stats_tag_term(int index, ::google::protobuf::uint64 value);
  inline void add_stats_tag_term(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      stats_tag_term() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_stats_tag_term();
  
  // repeated uint64 stats_sch_term = 16;
  inline int stats_sch_term_size() const;
  inline void clear_stats_sch_term();
  static const int kStatsSchTermFieldNumber = 16;
  inline ::google::protobuf::uint64 stats_sch_term(int index) const;
  inline void set_stats_sch_term(int index, ::google::protobuf::uint64 value);
  inline void add_stats_sch_term(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      stats_sch_term() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_stats_sch_term();
  
  // optional int32 task_type = 17;
  inline bool has_task_type() const;
  inline void clear_task_type();
  static const int kTaskTypeFieldNumber = 17;
  inline ::google::protobuf::int32 task_type() const;
  inline void set_task_type(::google::protobuf::int32 value);
  
  // optional bytes searcher_company_name = 19;
  inline bool has_searcher_company_name() const;
  inline void clear_searcher_company_name();
  static const int kSearcherCompanyNameFieldNumber = 19;
  inline const ::std::string& searcher_company_name() const;
  inline void set_searcher_company_name(const ::std::string& value);
  inline void set_searcher_company_name(const char* value);
  inline void set_searcher_company_name(const void* value, size_t size);
  inline ::std::string* mutable_searcher_company_name();
  inline ::std::string* release_searcher_company_name();
  
  // optional bool filter_company_1du_contacts = 20;
  inline bool has_filter_company_1du_contacts() const;
  inline void clear_filter_company_1du_contacts();
  static const int kFilterCompany1DuContactsFieldNumber = 20;
  inline bool filter_company_1du_contacts() const;
  inline void set_filter_company_1du_contacts(bool value);
  
  // optional bool filter_non_company_1du_contacts = 21;
  inline bool has_filter_non_company_1du_contacts() const;
  inline void clear_filter_non_company_1du_contacts();
  static const int kFilterNonCompany1DuContactsFieldNumber = 21;
  inline bool filter_non_company_1du_contacts() const;
  inline void set_filter_non_company_1du_contacts(bool value);
  
  // optional bool debug = 18;
  inline bool has_debug() const;
  inline void clear_debug();
  static const int kDebugFieldNumber = 18;
  inline bool debug() const;
  inline void set_debug(bool value);
  
  // @@protoc_insertion_point(class_scope:user_search.PbUserSearchQuery)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_xapian_query_blob();
  inline void clear_has_xapian_query_blob();
  inline void set_has_searcher_uid();
  inline void clear_has_searcher_uid();
  inline void set_has_search_type();
  inline void clear_has_search_type();
  inline void set_has_link_distance_filter();
  inline void clear_has_link_distance_filter();
  inline void set_has_task_type();
  inline void clear_has_task_type();
  inline void set_has_searcher_company_name();
  inline void clear_has_searcher_company_name();
  inline void set_has_filter_company_1du_contacts();
  inline void clear_has_filter_company_1du_contacts();
  inline void set_has_filter_non_company_1du_contacts();
  inline void clear_has_filter_non_company_1du_contacts();
  inline void set_has_debug();
  inline void clear_has_debug();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 offset_;
  ::google::protobuf::int32 count_;
  ::std::string* xapian_query_blob_;
  ::google::protobuf::int64 searcher_uid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > d1_uid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > d2_uid_;
  ::google::protobuf::RepeatedPtrField< ::user_search::PbUserSearchQuery_TermExpansion > te_;
  ::user_search::PbUserSearchQuery_LinkDistanceFilter* link_distance_filter_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > stats_com_term_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > stats_job_term_;
  ::google::protobuf::int32 search_type_;
  ::google::protobuf::int32 task_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > stats_tag_term_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > stats_sch_term_;
  ::std::string* searcher_company_name_;
  bool filter_company_1du_contacts_;
  bool filter_non_company_1du_contacts_;
  bool debug_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_UserSearchQuery_2eproto();
  friend void protobuf_AssignDesc_UserSearchQuery_2eproto();
  friend void protobuf_ShutdownFile_UserSearchQuery_2eproto();
  
  void InitAsDefaultInstance();
  static PbUserSearchQuery* default_instance_;
};
// ===================================================================


// ===================================================================

// PbUserSearchQuery_TermExpansion

// required bytes term = 1;
inline bool PbUserSearchQuery_TermExpansion::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbUserSearchQuery_TermExpansion::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbUserSearchQuery_TermExpansion::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbUserSearchQuery_TermExpansion::clear_term() {
  if (term_ != &::google::protobuf::internal::kEmptyString) {
    term_->clear();
  }
  clear_has_term();
}
inline const ::std::string& PbUserSearchQuery_TermExpansion::term() const {
  return *term_;
}
inline void PbUserSearchQuery_TermExpansion::set_term(const ::std::string& value) {
  set_has_term();
  if (term_ == &::google::protobuf::internal::kEmptyString) {
    term_ = new ::std::string;
  }
  term_->assign(value);
}
inline void PbUserSearchQuery_TermExpansion::set_term(const char* value) {
  set_has_term();
  if (term_ == &::google::protobuf::internal::kEmptyString) {
    term_ = new ::std::string;
  }
  term_->assign(value);
}
inline void PbUserSearchQuery_TermExpansion::set_term(const void* value, size_t size) {
  set_has_term();
  if (term_ == &::google::protobuf::internal::kEmptyString) {
    term_ = new ::std::string;
  }
  term_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PbUserSearchQuery_TermExpansion::mutable_term() {
  set_has_term();
  if (term_ == &::google::protobuf::internal::kEmptyString) {
    term_ = new ::std::string;
  }
  return term_;
}
inline ::std::string* PbUserSearchQuery_TermExpansion::release_term() {
  clear_has_term();
  if (term_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = term_;
    term_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated bytes eterm = 2;
inline int PbUserSearchQuery_TermExpansion::eterm_size() const {
  return eterm_.size();
}
inline void PbUserSearchQuery_TermExpansion::clear_eterm() {
  eterm_.Clear();
}
inline const ::std::string& PbUserSearchQuery_TermExpansion::eterm(int index) const {
  return eterm_.Get(index);
}
inline ::std::string* PbUserSearchQuery_TermExpansion::mutable_eterm(int index) {
  return eterm_.Mutable(index);
}
inline void PbUserSearchQuery_TermExpansion::set_eterm(int index, const ::std::string& value) {
  eterm_.Mutable(index)->assign(value);
}
inline void PbUserSearchQuery_TermExpansion::set_eterm(int index, const char* value) {
  eterm_.Mutable(index)->assign(value);
}
inline void PbUserSearchQuery_TermExpansion::set_eterm(int index, const void* value, size_t size) {
  eterm_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PbUserSearchQuery_TermExpansion::add_eterm() {
  return eterm_.Add();
}
inline void PbUserSearchQuery_TermExpansion::add_eterm(const ::std::string& value) {
  eterm_.Add()->assign(value);
}
inline void PbUserSearchQuery_TermExpansion::add_eterm(const char* value) {
  eterm_.Add()->assign(value);
}
inline void PbUserSearchQuery_TermExpansion::add_eterm(const void* value, size_t size) {
  eterm_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PbUserSearchQuery_TermExpansion::eterm() const {
  return eterm_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PbUserSearchQuery_TermExpansion::mutable_eterm() {
  return &eterm_;
}

// -------------------------------------------------------------------

// PbUserSearchQuery_LinkDistanceFilter

// optional bool link_1du = 1;
inline bool PbUserSearchQuery_LinkDistanceFilter::has_link_1du() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbUserSearchQuery_LinkDistanceFilter::set_has_link_1du() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbUserSearchQuery_LinkDistanceFilter::clear_has_link_1du() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbUserSearchQuery_LinkDistanceFilter::clear_link_1du() {
  link_1du_ = false;
  clear_has_link_1du();
}
inline bool PbUserSearchQuery_LinkDistanceFilter::link_1du() const {
  return link_1du_;
}
inline void PbUserSearchQuery_LinkDistanceFilter::set_link_1du(bool value) {
  set_has_link_1du();
  link_1du_ = value;
}

// optional bool link_2du = 2;
inline bool PbUserSearchQuery_LinkDistanceFilter::has_link_2du() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbUserSearchQuery_LinkDistanceFilter::set_has_link_2du() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbUserSearchQuery_LinkDistanceFilter::clear_has_link_2du() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbUserSearchQuery_LinkDistanceFilter::clear_link_2du() {
  link_2du_ = false;
  clear_has_link_2du();
}
inline bool PbUserSearchQuery_LinkDistanceFilter::link_2du() const {
  return link_2du_;
}
inline void PbUserSearchQuery_LinkDistanceFilter::set_link_2du(bool value) {
  set_has_link_2du();
  link_2du_ = value;
}

// optional bool link_xdu = 3;
inline bool PbUserSearchQuery_LinkDistanceFilter::has_link_xdu() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbUserSearchQuery_LinkDistanceFilter::set_has_link_xdu() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbUserSearchQuery_LinkDistanceFilter::clear_has_link_xdu() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbUserSearchQuery_LinkDistanceFilter::clear_link_xdu() {
  link_xdu_ = false;
  clear_has_link_xdu();
}
inline bool PbUserSearchQuery_LinkDistanceFilter::link_xdu() const {
  return link_xdu_;
}
inline void PbUserSearchQuery_LinkDistanceFilter::set_link_xdu(bool value) {
  set_has_link_xdu();
  link_xdu_ = value;
}

// -------------------------------------------------------------------

// PbUserSearchQuery

// optional int32 offset = 1;
inline bool PbUserSearchQuery::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PbUserSearchQuery::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PbUserSearchQuery::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PbUserSearchQuery::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline ::google::protobuf::int32 PbUserSearchQuery::offset() const {
  return offset_;
}
inline void PbUserSearchQuery::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
}

// optional int32 count = 2;
inline bool PbUserSearchQuery::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PbUserSearchQuery::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PbUserSearchQuery::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PbUserSearchQuery::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 PbUserSearchQuery::count() const {
  return count_;
}
inline void PbUserSearchQuery::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// required bytes xapian_query_blob = 3;
inline bool PbUserSearchQuery::has_xapian_query_blob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PbUserSearchQuery::set_has_xapian_query_blob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PbUserSearchQuery::clear_has_xapian_query_blob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PbUserSearchQuery::clear_xapian_query_blob() {
  if (xapian_query_blob_ != &::google::protobuf::internal::kEmptyString) {
    xapian_query_blob_->clear();
  }
  clear_has_xapian_query_blob();
}
inline const ::std::string& PbUserSearchQuery::xapian_query_blob() const {
  return *xapian_query_blob_;
}
inline void PbUserSearchQuery::set_xapian_query_blob(const ::std::string& value) {
  set_has_xapian_query_blob();
  if (xapian_query_blob_ == &::google::protobuf::internal::kEmptyString) {
    xapian_query_blob_ = new ::std::string;
  }
  xapian_query_blob_->assign(value);
}
inline void PbUserSearchQuery::set_xapian_query_blob(const char* value) {
  set_has_xapian_query_blob();
  if (xapian_query_blob_ == &::google::protobuf::internal::kEmptyString) {
    xapian_query_blob_ = new ::std::string;
  }
  xapian_query_blob_->assign(value);
}
inline void PbUserSearchQuery::set_xapian_query_blob(const void* value, size_t size) {
  set_has_xapian_query_blob();
  if (xapian_query_blob_ == &::google::protobuf::internal::kEmptyString) {
    xapian_query_blob_ = new ::std::string;
  }
  xapian_query_blob_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PbUserSearchQuery::mutable_xapian_query_blob() {
  set_has_xapian_query_blob();
  if (xapian_query_blob_ == &::google::protobuf::internal::kEmptyString) {
    xapian_query_blob_ = new ::std::string;
  }
  return xapian_query_blob_;
}
inline ::std::string* PbUserSearchQuery::release_xapian_query_blob() {
  clear_has_xapian_query_blob();
  if (xapian_query_blob_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = xapian_query_blob_;
    xapian_query_blob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 searcher_uid = 5;
inline bool PbUserSearchQuery::has_searcher_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PbUserSearchQuery::set_has_searcher_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PbUserSearchQuery::clear_has_searcher_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PbUserSearchQuery::clear_searcher_uid() {
  searcher_uid_ = GOOGLE_LONGLONG(0);
  clear_has_searcher_uid();
}
inline ::google::protobuf::int64 PbUserSearchQuery::searcher_uid() const {
  return searcher_uid_;
}
inline void PbUserSearchQuery::set_searcher_uid(::google::protobuf::int64 value) {
  set_has_searcher_uid();
  searcher_uid_ = value;
}

// repeated int64 d1_uid = 6;
inline int PbUserSearchQuery::d1_uid_size() const {
  return d1_uid_.size();
}
inline void PbUserSearchQuery::clear_d1_uid() {
  d1_uid_.Clear();
}
inline ::google::protobuf::int64 PbUserSearchQuery::d1_uid(int index) const {
  return d1_uid_.Get(index);
}
inline void PbUserSearchQuery::set_d1_uid(int index, ::google::protobuf::int64 value) {
  d1_uid_.Set(index, value);
}
inline void PbUserSearchQuery::add_d1_uid(::google::protobuf::int64 value) {
  d1_uid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PbUserSearchQuery::d1_uid() const {
  return d1_uid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PbUserSearchQuery::mutable_d1_uid() {
  return &d1_uid_;
}

// repeated int64 d2_uid = 7;
inline int PbUserSearchQuery::d2_uid_size() const {
  return d2_uid_.size();
}
inline void PbUserSearchQuery::clear_d2_uid() {
  d2_uid_.Clear();
}
inline ::google::protobuf::int64 PbUserSearchQuery::d2_uid(int index) const {
  return d2_uid_.Get(index);
}
inline void PbUserSearchQuery::set_d2_uid(int index, ::google::protobuf::int64 value) {
  d2_uid_.Set(index, value);
}
inline void PbUserSearchQuery::add_d2_uid(::google::protobuf::int64 value) {
  d2_uid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
PbUserSearchQuery::d2_uid() const {
  return d2_uid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
PbUserSearchQuery::mutable_d2_uid() {
  return &d2_uid_;
}

// repeated .user_search.PbUserSearchQuery.TermExpansion te = 8;
inline int PbUserSearchQuery::te_size() const {
  return te_.size();
}
inline void PbUserSearchQuery::clear_te() {
  te_.Clear();
}
inline const ::user_search::PbUserSearchQuery_TermExpansion& PbUserSearchQuery::te(int index) const {
  return te_.Get(index);
}
inline ::user_search::PbUserSearchQuery_TermExpansion* PbUserSearchQuery::mutable_te(int index) {
  return te_.Mutable(index);
}
inline ::user_search::PbUserSearchQuery_TermExpansion* PbUserSearchQuery::add_te() {
  return te_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::user_search::PbUserSearchQuery_TermExpansion >&
PbUserSearchQuery::te() const {
  return te_;
}
inline ::google::protobuf::RepeatedPtrField< ::user_search::PbUserSearchQuery_TermExpansion >*
PbUserSearchQuery::mutable_te() {
  return &te_;
}

// optional int32 search_type = 9;
inline bool PbUserSearchQuery::has_search_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PbUserSearchQuery::set_has_search_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PbUserSearchQuery::clear_has_search_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PbUserSearchQuery::clear_search_type() {
  search_type_ = 0;
  clear_has_search_type();
}
inline ::google::protobuf::int32 PbUserSearchQuery::search_type() const {
  return search_type_;
}
inline void PbUserSearchQuery::set_search_type(::google::protobuf::int32 value) {
  set_has_search_type();
  search_type_ = value;
}

// optional .user_search.PbUserSearchQuery.LinkDistanceFilter link_distance_filter = 10;
inline bool PbUserSearchQuery::has_link_distance_filter() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PbUserSearchQuery::set_has_link_distance_filter() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PbUserSearchQuery::clear_has_link_distance_filter() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PbUserSearchQuery::clear_link_distance_filter() {
  if (link_distance_filter_ != NULL) link_distance_filter_->::user_search::PbUserSearchQuery_LinkDistanceFilter::Clear();
  clear_has_link_distance_filter();
}
inline const ::user_search::PbUserSearchQuery_LinkDistanceFilter& PbUserSearchQuery::link_distance_filter() const {
  return link_distance_filter_ != NULL ? *link_distance_filter_ : *default_instance_->link_distance_filter_;
}
inline ::user_search::PbUserSearchQuery_LinkDistanceFilter* PbUserSearchQuery::mutable_link_distance_filter() {
  set_has_link_distance_filter();
  if (link_distance_filter_ == NULL) link_distance_filter_ = new ::user_search::PbUserSearchQuery_LinkDistanceFilter;
  return link_distance_filter_;
}
inline ::user_search::PbUserSearchQuery_LinkDistanceFilter* PbUserSearchQuery::release_link_distance_filter() {
  clear_has_link_distance_filter();
  ::user_search::PbUserSearchQuery_LinkDistanceFilter* temp = link_distance_filter_;
  link_distance_filter_ = NULL;
  return temp;
}

// repeated uint64 stats_com_term = 13;
inline int PbUserSearchQuery::stats_com_term_size() const {
  return stats_com_term_.size();
}
inline void PbUserSearchQuery::clear_stats_com_term() {
  stats_com_term_.Clear();
}
inline ::google::protobuf::uint64 PbUserSearchQuery::stats_com_term(int index) const {
  return stats_com_term_.Get(index);
}
inline void PbUserSearchQuery::set_stats_com_term(int index, ::google::protobuf::uint64 value) {
  stats_com_term_.Set(index, value);
}
inline void PbUserSearchQuery::add_stats_com_term(::google::protobuf::uint64 value) {
  stats_com_term_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
PbUserSearchQuery::stats_com_term() const {
  return stats_com_term_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
PbUserSearchQuery::mutable_stats_com_term() {
  return &stats_com_term_;
}

// repeated uint64 stats_job_term = 14;
inline int PbUserSearchQuery::stats_job_term_size() const {
  return stats_job_term_.size();
}
inline void PbUserSearchQuery::clear_stats_job_term() {
  stats_job_term_.Clear();
}
inline ::google::protobuf::uint64 PbUserSearchQuery::stats_job_term(int index) const {
  return stats_job_term_.Get(index);
}
inline void PbUserSearchQuery::set_stats_job_term(int index, ::google::protobuf::uint64 value) {
  stats_job_term_.Set(index, value);
}
inline void PbUserSearchQuery::add_stats_job_term(::google::protobuf::uint64 value) {
  stats_job_term_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
PbUserSearchQuery::stats_job_term() const {
  return stats_job_term_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
PbUserSearchQuery::mutable_stats_job_term() {
  return &stats_job_term_;
}

// repeated uint64 stats_tag_term = 15;
inline int PbUserSearchQuery::stats_tag_term_size() const {
  return stats_tag_term_.size();
}
inline void PbUserSearchQuery::clear_stats_tag_term() {
  stats_tag_term_.Clear();
}
inline ::google::protobuf::uint64 PbUserSearchQuery::stats_tag_term(int index) const {
  return stats_tag_term_.Get(index);
}
inline void PbUserSearchQuery::set_stats_tag_term(int index, ::google::protobuf::uint64 value) {
  stats_tag_term_.Set(index, value);
}
inline void PbUserSearchQuery::add_stats_tag_term(::google::protobuf::uint64 value) {
  stats_tag_term_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
PbUserSearchQuery::stats_tag_term() const {
  return stats_tag_term_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
PbUserSearchQuery::mutable_stats_tag_term() {
  return &stats_tag_term_;
}

// repeated uint64 stats_sch_term = 16;
inline int PbUserSearchQuery::stats_sch_term_size() const {
  return stats_sch_term_.size();
}
inline void PbUserSearchQuery::clear_stats_sch_term() {
  stats_sch_term_.Clear();
}
inline ::google::protobuf::uint64 PbUserSearchQuery::stats_sch_term(int index) const {
  return stats_sch_term_.Get(index);
}
inline void PbUserSearchQuery::set_stats_sch_term(int index, ::google::protobuf::uint64 value) {
  stats_sch_term_.Set(index, value);
}
inline void PbUserSearchQuery::add_stats_sch_term(::google::protobuf::uint64 value) {
  stats_sch_term_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
PbUserSearchQuery::stats_sch_term() const {
  return stats_sch_term_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
PbUserSearchQuery::mutable_stats_sch_term() {
  return &stats_sch_term_;
}

// optional int32 task_type = 17;
inline bool PbUserSearchQuery::has_task_type() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PbUserSearchQuery::set_has_task_type() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PbUserSearchQuery::clear_has_task_type() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PbUserSearchQuery::clear_task_type() {
  task_type_ = 0;
  clear_has_task_type();
}
inline ::google::protobuf::int32 PbUserSearchQuery::task_type() const {
  return task_type_;
}
inline void PbUserSearchQuery::set_task_type(::google::protobuf::int32 value) {
  set_has_task_type();
  task_type_ = value;
}

// optional bytes searcher_company_name = 19;
inline bool PbUserSearchQuery::has_searcher_company_name() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PbUserSearchQuery::set_has_searcher_company_name() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PbUserSearchQuery::clear_has_searcher_company_name() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PbUserSearchQuery::clear_searcher_company_name() {
  if (searcher_company_name_ != &::google::protobuf::internal::kEmptyString) {
    searcher_company_name_->clear();
  }
  clear_has_searcher_company_name();
}
inline const ::std::string& PbUserSearchQuery::searcher_company_name() const {
  return *searcher_company_name_;
}
inline void PbUserSearchQuery::set_searcher_company_name(const ::std::string& value) {
  set_has_searcher_company_name();
  if (searcher_company_name_ == &::google::protobuf::internal::kEmptyString) {
    searcher_company_name_ = new ::std::string;
  }
  searcher_company_name_->assign(value);
}
inline void PbUserSearchQuery::set_searcher_company_name(const char* value) {
  set_has_searcher_company_name();
  if (searcher_company_name_ == &::google::protobuf::internal::kEmptyString) {
    searcher_company_name_ = new ::std::string;
  }
  searcher_company_name_->assign(value);
}
inline void PbUserSearchQuery::set_searcher_company_name(const void* value, size_t size) {
  set_has_searcher_company_name();
  if (searcher_company_name_ == &::google::protobuf::internal::kEmptyString) {
    searcher_company_name_ = new ::std::string;
  }
  searcher_company_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PbUserSearchQuery::mutable_searcher_company_name() {
  set_has_searcher_company_name();
  if (searcher_company_name_ == &::google::protobuf::internal::kEmptyString) {
    searcher_company_name_ = new ::std::string;
  }
  return searcher_company_name_;
}
inline ::std::string* PbUserSearchQuery::release_searcher_company_name() {
  clear_has_searcher_company_name();
  if (searcher_company_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = searcher_company_name_;
    searcher_company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool filter_company_1du_contacts = 20;
inline bool PbUserSearchQuery::has_filter_company_1du_contacts() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PbUserSearchQuery::set_has_filter_company_1du_contacts() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PbUserSearchQuery::clear_has_filter_company_1du_contacts() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PbUserSearchQuery::clear_filter_company_1du_contacts() {
  filter_company_1du_contacts_ = false;
  clear_has_filter_company_1du_contacts();
}
inline bool PbUserSearchQuery::filter_company_1du_contacts() const {
  return filter_company_1du_contacts_;
}
inline void PbUserSearchQuery::set_filter_company_1du_contacts(bool value) {
  set_has_filter_company_1du_contacts();
  filter_company_1du_contacts_ = value;
}

// optional bool filter_non_company_1du_contacts = 21;
inline bool PbUserSearchQuery::has_filter_non_company_1du_contacts() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PbUserSearchQuery::set_has_filter_non_company_1du_contacts() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PbUserSearchQuery::clear_has_filter_non_company_1du_contacts() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PbUserSearchQuery::clear_filter_non_company_1du_contacts() {
  filter_non_company_1du_contacts_ = false;
  clear_has_filter_non_company_1du_contacts();
}
inline bool PbUserSearchQuery::filter_non_company_1du_contacts() const {
  return filter_non_company_1du_contacts_;
}
inline void PbUserSearchQuery::set_filter_non_company_1du_contacts(bool value) {
  set_has_filter_non_company_1du_contacts();
  filter_non_company_1du_contacts_ = value;
}

// optional bool debug = 18;
inline bool PbUserSearchQuery::has_debug() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PbUserSearchQuery::set_has_debug() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PbUserSearchQuery::clear_has_debug() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PbUserSearchQuery::clear_debug() {
  debug_ = false;
  clear_has_debug();
}
inline bool PbUserSearchQuery::debug() const {
  return debug_;
}
inline void PbUserSearchQuery::set_debug(bool value) {
  set_has_debug();
  debug_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace user_search

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_UserSearchQuery_2eproto__INCLUDED
