// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UserSearchResult.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace user_search {

namespace {

const ::google::protobuf::Descriptor* UserSearchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserSearchResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserSearchResult_ResultItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserSearchResult_ResultItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserSearchResult_StatsItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserSearchResult_StatsItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_UserSearchResult_2eproto() {
  protobuf_AddDesc_UserSearchResult_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UserSearchResult.proto");
  GOOGLE_CHECK(file != NULL);
  UserSearchResult_descriptor_ = file->message_type(0);
  static const int UserSearchResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSearchResult, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSearchResult, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSearchResult, total_estimated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSearchResult, result_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSearchResult, stats_item_),
  };
  UserSearchResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserSearchResult_descriptor_,
      UserSearchResult::default_instance_,
      UserSearchResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSearchResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSearchResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserSearchResult));
  UserSearchResult_ResultItem_descriptor_ = UserSearchResult_descriptor_->nested_type(0);
  static const int UserSearchResult_ResultItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSearchResult_ResultItem, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSearchResult_ResultItem, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSearchResult_ResultItem, link_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSearchResult_ResultItem, debug_data_),
  };
  UserSearchResult_ResultItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserSearchResult_ResultItem_descriptor_,
      UserSearchResult_ResultItem::default_instance_,
      UserSearchResult_ResultItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSearchResult_ResultItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSearchResult_ResultItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserSearchResult_ResultItem));
  UserSearchResult_StatsItem_descriptor_ = UserSearchResult_descriptor_->nested_type(1);
  static const int UserSearchResult_StatsItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSearchResult_StatsItem, stats_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSearchResult_StatsItem, stats_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSearchResult_StatsItem, stats_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSearchResult_StatsItem, stats_value_),
  };
  UserSearchResult_StatsItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserSearchResult_StatsItem_descriptor_,
      UserSearchResult_StatsItem::default_instance_,
      UserSearchResult_StatsItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSearchResult_StatsItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserSearchResult_StatsItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserSearchResult_StatsItem));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UserSearchResult_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserSearchResult_descriptor_, &UserSearchResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserSearchResult_ResultItem_descriptor_, &UserSearchResult_ResultItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserSearchResult_StatsItem_descriptor_, &UserSearchResult_StatsItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UserSearchResult_2eproto() {
  delete UserSearchResult::default_instance_;
  delete UserSearchResult_reflection_;
  delete UserSearchResult_ResultItem::default_instance_;
  delete UserSearchResult_ResultItem_reflection_;
  delete UserSearchResult_StatsItem::default_instance_;
  delete UserSearchResult_StatsItem_reflection_;
}

void protobuf_AddDesc_UserSearchResult_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026UserSearchResult.proto\022\013user_search\"\370\002"
    "\n\020UserSearchResult\022\016\n\006offset\030\001 \001(\005\022\r\n\005co"
    "unt\030\002 \001(\005\022\027\n\017total_estimated\030\003 \001(\005\022=\n\013re"
    "sult_item\030\004 \003(\0132(.user_search.UserSearch"
    "Result.ResultItem\022;\n\nstats_item\030\005 \003(\0132\'."
    "user_search.UserSearchResult.StatsItem\032S"
    "\n\nResultItem\022\013\n\003uid\030\001 \001(\003\022\r\n\005score\030\002 \001(\001"
    "\022\025\n\rlink_distance\030\003 \001(\005\022\022\n\ndebug_data\030\004 "
    "\001(\014\032[\n\tStatsItem\022\022\n\nstats_type\030\001 \001(\014\022\021\n\t"
    "stats_key\030\002 \001(\004\022\022\n\nstats_name\030\004 \001(\014\022\023\n\013s"
    "tats_value\030\003 \001(\004", 416);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UserSearchResult.proto", &protobuf_RegisterTypes);
  UserSearchResult::default_instance_ = new UserSearchResult();
  UserSearchResult_ResultItem::default_instance_ = new UserSearchResult_ResultItem();
  UserSearchResult_StatsItem::default_instance_ = new UserSearchResult_StatsItem();
  UserSearchResult::default_instance_->InitAsDefaultInstance();
  UserSearchResult_ResultItem::default_instance_->InitAsDefaultInstance();
  UserSearchResult_StatsItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UserSearchResult_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UserSearchResult_2eproto {
  StaticDescriptorInitializer_UserSearchResult_2eproto() {
    protobuf_AddDesc_UserSearchResult_2eproto();
  }
} static_descriptor_initializer_UserSearchResult_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int UserSearchResult_ResultItem::kUidFieldNumber;
const int UserSearchResult_ResultItem::kScoreFieldNumber;
const int UserSearchResult_ResultItem::kLinkDistanceFieldNumber;
const int UserSearchResult_ResultItem::kDebugDataFieldNumber;
#endif  // !_MSC_VER

UserSearchResult_ResultItem::UserSearchResult_ResultItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserSearchResult_ResultItem::InitAsDefaultInstance() {
}

UserSearchResult_ResultItem::UserSearchResult_ResultItem(const UserSearchResult_ResultItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserSearchResult_ResultItem::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  score_ = 0;
  link_distance_ = 0;
  debug_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSearchResult_ResultItem::~UserSearchResult_ResultItem() {
  SharedDtor();
}

void UserSearchResult_ResultItem::SharedDtor() {
  if (debug_data_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_data_;
  }
  if (this != default_instance_) {
  }
}

void UserSearchResult_ResultItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSearchResult_ResultItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSearchResult_ResultItem_descriptor_;
}

const UserSearchResult_ResultItem& UserSearchResult_ResultItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserSearchResult_2eproto();  return *default_instance_;
}

UserSearchResult_ResultItem* UserSearchResult_ResultItem::default_instance_ = NULL;

UserSearchResult_ResultItem* UserSearchResult_ResultItem::New() const {
  return new UserSearchResult_ResultItem;
}

void UserSearchResult_ResultItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_LONGLONG(0);
    score_ = 0;
    link_distance_ = 0;
    if (has_debug_data()) {
      if (debug_data_ != &::google::protobuf::internal::kEmptyString) {
        debug_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserSearchResult_ResultItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_score;
        break;
      }
      
      // optional double score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_link_distance;
        break;
      }
      
      // optional int32 link_distance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_link_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &link_distance_)));
          set_has_link_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_debug_data;
        break;
      }
      
      // optional bytes debug_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_debug_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserSearchResult_ResultItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }
  
  // optional double score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->score(), output);
  }
  
  // optional int32 link_distance = 3;
  if (has_link_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->link_distance(), output);
  }
  
  // optional bytes debug_data = 4;
  if (has_debug_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->debug_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserSearchResult_ResultItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }
  
  // optional double score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->score(), target);
  }
  
  // optional int32 link_distance = 3;
  if (has_link_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->link_distance(), target);
  }
  
  // optional bytes debug_data = 4;
  if (has_debug_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->debug_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserSearchResult_ResultItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }
    
    // optional double score = 2;
    if (has_score()) {
      total_size += 1 + 8;
    }
    
    // optional int32 link_distance = 3;
    if (has_link_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->link_distance());
    }
    
    // optional bytes debug_data = 4;
    if (has_debug_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->debug_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSearchResult_ResultItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserSearchResult_ResultItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserSearchResult_ResultItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserSearchResult_ResultItem::MergeFrom(const UserSearchResult_ResultItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_link_distance()) {
      set_link_distance(from.link_distance());
    }
    if (from.has_debug_data()) {
      set_debug_data(from.debug_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserSearchResult_ResultItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSearchResult_ResultItem::CopyFrom(const UserSearchResult_ResultItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSearchResult_ResultItem::IsInitialized() const {
  
  return true;
}

void UserSearchResult_ResultItem::Swap(UserSearchResult_ResultItem* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(score_, other->score_);
    std::swap(link_distance_, other->link_distance_);
    std::swap(debug_data_, other->debug_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserSearchResult_ResultItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserSearchResult_ResultItem_descriptor_;
  metadata.reflection = UserSearchResult_ResultItem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserSearchResult_StatsItem::kStatsTypeFieldNumber;
const int UserSearchResult_StatsItem::kStatsKeyFieldNumber;
const int UserSearchResult_StatsItem::kStatsNameFieldNumber;
const int UserSearchResult_StatsItem::kStatsValueFieldNumber;
#endif  // !_MSC_VER

UserSearchResult_StatsItem::UserSearchResult_StatsItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserSearchResult_StatsItem::InitAsDefaultInstance() {
}

UserSearchResult_StatsItem::UserSearchResult_StatsItem(const UserSearchResult_StatsItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserSearchResult_StatsItem::SharedCtor() {
  _cached_size_ = 0;
  stats_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stats_key_ = GOOGLE_ULONGLONG(0);
  stats_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stats_value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSearchResult_StatsItem::~UserSearchResult_StatsItem() {
  SharedDtor();
}

void UserSearchResult_StatsItem::SharedDtor() {
  if (stats_type_ != &::google::protobuf::internal::kEmptyString) {
    delete stats_type_;
  }
  if (stats_name_ != &::google::protobuf::internal::kEmptyString) {
    delete stats_name_;
  }
  if (this != default_instance_) {
  }
}

void UserSearchResult_StatsItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSearchResult_StatsItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSearchResult_StatsItem_descriptor_;
}

const UserSearchResult_StatsItem& UserSearchResult_StatsItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserSearchResult_2eproto();  return *default_instance_;
}

UserSearchResult_StatsItem* UserSearchResult_StatsItem::default_instance_ = NULL;

UserSearchResult_StatsItem* UserSearchResult_StatsItem::New() const {
  return new UserSearchResult_StatsItem;
}

void UserSearchResult_StatsItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stats_type()) {
      if (stats_type_ != &::google::protobuf::internal::kEmptyString) {
        stats_type_->clear();
      }
    }
    stats_key_ = GOOGLE_ULONGLONG(0);
    if (has_stats_name()) {
      if (stats_name_ != &::google::protobuf::internal::kEmptyString) {
        stats_name_->clear();
      }
    }
    stats_value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserSearchResult_StatsItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes stats_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stats_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stats_key;
        break;
      }
      
      // optional uint64 stats_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stats_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stats_key_)));
          set_has_stats_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stats_value;
        break;
      }
      
      // optional uint64 stats_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stats_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stats_value_)));
          set_has_stats_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stats_name;
        break;
      }
      
      // optional bytes stats_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stats_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserSearchResult_StatsItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes stats_type = 1;
  if (has_stats_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->stats_type(), output);
  }
  
  // optional uint64 stats_key = 2;
  if (has_stats_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stats_key(), output);
  }
  
  // optional uint64 stats_value = 3;
  if (has_stats_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->stats_value(), output);
  }
  
  // optional bytes stats_name = 4;
  if (has_stats_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->stats_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserSearchResult_StatsItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes stats_type = 1;
  if (has_stats_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->stats_type(), target);
  }
  
  // optional uint64 stats_key = 2;
  if (has_stats_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stats_key(), target);
  }
  
  // optional uint64 stats_value = 3;
  if (has_stats_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->stats_value(), target);
  }
  
  // optional bytes stats_name = 4;
  if (has_stats_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->stats_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserSearchResult_StatsItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes stats_type = 1;
    if (has_stats_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stats_type());
    }
    
    // optional uint64 stats_key = 2;
    if (has_stats_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stats_key());
    }
    
    // optional bytes stats_name = 4;
    if (has_stats_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stats_name());
    }
    
    // optional uint64 stats_value = 3;
    if (has_stats_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stats_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSearchResult_StatsItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserSearchResult_StatsItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserSearchResult_StatsItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserSearchResult_StatsItem::MergeFrom(const UserSearchResult_StatsItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stats_type()) {
      set_stats_type(from.stats_type());
    }
    if (from.has_stats_key()) {
      set_stats_key(from.stats_key());
    }
    if (from.has_stats_name()) {
      set_stats_name(from.stats_name());
    }
    if (from.has_stats_value()) {
      set_stats_value(from.stats_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserSearchResult_StatsItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSearchResult_StatsItem::CopyFrom(const UserSearchResult_StatsItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSearchResult_StatsItem::IsInitialized() const {
  
  return true;
}

void UserSearchResult_StatsItem::Swap(UserSearchResult_StatsItem* other) {
  if (other != this) {
    std::swap(stats_type_, other->stats_type_);
    std::swap(stats_key_, other->stats_key_);
    std::swap(stats_name_, other->stats_name_);
    std::swap(stats_value_, other->stats_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserSearchResult_StatsItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserSearchResult_StatsItem_descriptor_;
  metadata.reflection = UserSearchResult_StatsItem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int UserSearchResult::kOffsetFieldNumber;
const int UserSearchResult::kCountFieldNumber;
const int UserSearchResult::kTotalEstimatedFieldNumber;
const int UserSearchResult::kResultItemFieldNumber;
const int UserSearchResult::kStatsItemFieldNumber;
#endif  // !_MSC_VER

UserSearchResult::UserSearchResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserSearchResult::InitAsDefaultInstance() {
}

UserSearchResult::UserSearchResult(const UserSearchResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserSearchResult::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  count_ = 0;
  total_estimated_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserSearchResult::~UserSearchResult() {
  SharedDtor();
}

void UserSearchResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserSearchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserSearchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserSearchResult_descriptor_;
}

const UserSearchResult& UserSearchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserSearchResult_2eproto();  return *default_instance_;
}

UserSearchResult* UserSearchResult::default_instance_ = NULL;

UserSearchResult* UserSearchResult::New() const {
  return new UserSearchResult;
}

void UserSearchResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = 0;
    count_ = 0;
    total_estimated_ = 0;
  }
  result_item_.Clear();
  stats_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserSearchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_estimated;
        break;
      }
      
      // optional int32 total_estimated = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_estimated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_estimated_)));
          set_has_total_estimated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_result_item;
        break;
      }
      
      // repeated .user_search.UserSearchResult.ResultItem result_item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_result_item;
        if (input->ExpectTag(42)) goto parse_stats_item;
        break;
      }
      
      // repeated .user_search.UserSearchResult.StatsItem stats_item = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stats_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserSearchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  // optional int32 total_estimated = 3;
  if (has_total_estimated()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_estimated(), output);
  }
  
  // repeated .user_search.UserSearchResult.ResultItem result_item = 4;
  for (int i = 0; i < this->result_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->result_item(i), output);
  }
  
  // repeated .user_search.UserSearchResult.StatsItem stats_item = 5;
  for (int i = 0; i < this->stats_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stats_item(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserSearchResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  // optional int32 total_estimated = 3;
  if (has_total_estimated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_estimated(), target);
  }
  
  // repeated .user_search.UserSearchResult.ResultItem result_item = 4;
  for (int i = 0; i < this->result_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->result_item(i), target);
  }
  
  // repeated .user_search.UserSearchResult.StatsItem stats_item = 5;
  for (int i = 0; i < this->stats_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stats_item(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserSearchResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional int32 total_estimated = 3;
    if (has_total_estimated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_estimated());
    }
    
  }
  // repeated .user_search.UserSearchResult.ResultItem result_item = 4;
  total_size += 1 * this->result_item_size();
  for (int i = 0; i < this->result_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result_item(i));
  }
  
  // repeated .user_search.UserSearchResult.StatsItem stats_item = 5;
  total_size += 1 * this->stats_item_size();
  for (int i = 0; i < this->stats_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats_item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserSearchResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserSearchResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserSearchResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserSearchResult::MergeFrom(const UserSearchResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_item_.MergeFrom(from.result_item_);
  stats_item_.MergeFrom(from.stats_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_total_estimated()) {
      set_total_estimated(from.total_estimated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserSearchResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserSearchResult::CopyFrom(const UserSearchResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserSearchResult::IsInitialized() const {
  
  return true;
}

void UserSearchResult::Swap(UserSearchResult* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(count_, other->count_);
    std::swap(total_estimated_, other->total_estimated_);
    result_item_.Swap(&other->result_item_);
    stats_item_.Swap(&other->stats_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserSearchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserSearchResult_descriptor_;
  metadata.reflection = UserSearchResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace user_search

// @@protoc_insertion_point(global_scope)
