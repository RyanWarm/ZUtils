// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "JobSearchResult.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace job_search {

namespace {

const ::google::protobuf::Descriptor* JobSearchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobSearchResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobSearchResult_ResultItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobSearchResult_ResultItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobSearchResult_StatsItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobSearchResult_StatsItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_JobSearchResult_2eproto() {
  protobuf_AddDesc_JobSearchResult_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "JobSearchResult.proto");
  GOOGLE_CHECK(file != NULL);
  JobSearchResult_descriptor_ = file->message_type(0);
  static const int JobSearchResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult, total_estimated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult, result_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult, stats_item_),
  };
  JobSearchResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobSearchResult_descriptor_,
      JobSearchResult::default_instance_,
      JobSearchResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobSearchResult));
  JobSearchResult_ResultItem_descriptor_ = JobSearchResult_descriptor_->nested_type(0);
  static const int JobSearchResult_ResultItem_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult_ResultItem, jid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult_ResultItem, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult_ResultItem, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult_ResultItem, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult_ResultItem, company_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult_ResultItem, company_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult_ResultItem, company_image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult_ResultItem, department_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult_ResultItem, post_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult_ResultItem, debug_data_),
  };
  JobSearchResult_ResultItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobSearchResult_ResultItem_descriptor_,
      JobSearchResult_ResultItem::default_instance_,
      JobSearchResult_ResultItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult_ResultItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult_ResultItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobSearchResult_ResultItem));
  JobSearchResult_StatsItem_descriptor_ = JobSearchResult_descriptor_->nested_type(1);
  static const int JobSearchResult_StatsItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult_StatsItem, stats_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult_StatsItem, stats_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult_StatsItem, stats_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult_StatsItem, stats_value_),
  };
  JobSearchResult_StatsItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobSearchResult_StatsItem_descriptor_,
      JobSearchResult_StatsItem::default_instance_,
      JobSearchResult_StatsItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult_StatsItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobSearchResult_StatsItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobSearchResult_StatsItem));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_JobSearchResult_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobSearchResult_descriptor_, &JobSearchResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobSearchResult_ResultItem_descriptor_, &JobSearchResult_ResultItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobSearchResult_StatsItem_descriptor_, &JobSearchResult_StatsItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_JobSearchResult_2eproto() {
  delete JobSearchResult::default_instance_;
  delete JobSearchResult_reflection_;
  delete JobSearchResult_ResultItem::default_instance_;
  delete JobSearchResult_ResultItem_reflection_;
  delete JobSearchResult_StatsItem::default_instance_;
  delete JobSearchResult_StatsItem_reflection_;
}

void protobuf_AddDesc_JobSearchResult_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025JobSearchResult.proto\022\njob_search\"\346\003\n\017"
    "JobSearchResult\022\016\n\006offset\030\001 \001(\005\022\r\n\005count"
    "\030\002 \001(\005\022\027\n\017total_estimated\030\003 \001(\005\022;\n\013resul"
    "t_item\030\004 \003(\0132&.job_search.JobSearchResul"
    "t.ResultItem\0229\n\nstats_item\030\005 \003(\0132%.job_s"
    "earch.JobSearchResult.StatsItem\032\305\001\n\nResu"
    "ltItem\022\013\n\003jid\030\001 \001(\003\022\r\n\005score\030\002 \001(\001\022\r\n\005ti"
    "tle\030\003 \001(\014\022\020\n\010location\030\004 \001(\014\022\022\n\ncompany_i"
    "d\030\005 \001(\003\022\024\n\014company_name\030\006 \001(\014\022\025\n\rcompany"
    "_image\030\007 \001(\014\022\022\n\ndepartment\030\010 \001(\014\022\021\n\tpost"
    "_date\030\t \001(\003\022\022\n\ndebug_data\030\n \001(\014\032[\n\tStats"
    "Item\022\022\n\nstats_type\030\001 \001(\014\022\021\n\tstats_key\030\002 "
    "\001(\004\022\022\n\nstats_name\030\004 \001(\014\022\023\n\013stats_value\030\003"
    " \001(\004", 524);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "JobSearchResult.proto", &protobuf_RegisterTypes);
  JobSearchResult::default_instance_ = new JobSearchResult();
  JobSearchResult_ResultItem::default_instance_ = new JobSearchResult_ResultItem();
  JobSearchResult_StatsItem::default_instance_ = new JobSearchResult_StatsItem();
  JobSearchResult::default_instance_->InitAsDefaultInstance();
  JobSearchResult_ResultItem::default_instance_->InitAsDefaultInstance();
  JobSearchResult_StatsItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_JobSearchResult_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_JobSearchResult_2eproto {
  StaticDescriptorInitializer_JobSearchResult_2eproto() {
    protobuf_AddDesc_JobSearchResult_2eproto();
  }
} static_descriptor_initializer_JobSearchResult_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int JobSearchResult_ResultItem::kJidFieldNumber;
const int JobSearchResult_ResultItem::kScoreFieldNumber;
const int JobSearchResult_ResultItem::kTitleFieldNumber;
const int JobSearchResult_ResultItem::kLocationFieldNumber;
const int JobSearchResult_ResultItem::kCompanyIdFieldNumber;
const int JobSearchResult_ResultItem::kCompanyNameFieldNumber;
const int JobSearchResult_ResultItem::kCompanyImageFieldNumber;
const int JobSearchResult_ResultItem::kDepartmentFieldNumber;
const int JobSearchResult_ResultItem::kPostDateFieldNumber;
const int JobSearchResult_ResultItem::kDebugDataFieldNumber;
#endif  // !_MSC_VER

JobSearchResult_ResultItem::JobSearchResult_ResultItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JobSearchResult_ResultItem::InitAsDefaultInstance() {
}

JobSearchResult_ResultItem::JobSearchResult_ResultItem(const JobSearchResult_ResultItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JobSearchResult_ResultItem::SharedCtor() {
  _cached_size_ = 0;
  jid_ = GOOGLE_LONGLONG(0);
  score_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  company_id_ = GOOGLE_LONGLONG(0);
  company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  company_image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  department_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  post_date_ = GOOGLE_LONGLONG(0);
  debug_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobSearchResult_ResultItem::~JobSearchResult_ResultItem() {
  SharedDtor();
}

void JobSearchResult_ResultItem::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (company_name_ != &::google::protobuf::internal::kEmptyString) {
    delete company_name_;
  }
  if (company_image_ != &::google::protobuf::internal::kEmptyString) {
    delete company_image_;
  }
  if (department_ != &::google::protobuf::internal::kEmptyString) {
    delete department_;
  }
  if (debug_data_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_data_;
  }
  if (this != default_instance_) {
  }
}

void JobSearchResult_ResultItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobSearchResult_ResultItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobSearchResult_ResultItem_descriptor_;
}

const JobSearchResult_ResultItem& JobSearchResult_ResultItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_JobSearchResult_2eproto();  return *default_instance_;
}

JobSearchResult_ResultItem* JobSearchResult_ResultItem::default_instance_ = NULL;

JobSearchResult_ResultItem* JobSearchResult_ResultItem::New() const {
  return new JobSearchResult_ResultItem;
}

void JobSearchResult_ResultItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    jid_ = GOOGLE_LONGLONG(0);
    score_ = 0;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
    company_id_ = GOOGLE_LONGLONG(0);
    if (has_company_name()) {
      if (company_name_ != &::google::protobuf::internal::kEmptyString) {
        company_name_->clear();
      }
    }
    if (has_company_image()) {
      if (company_image_ != &::google::protobuf::internal::kEmptyString) {
        company_image_->clear();
      }
    }
    if (has_department()) {
      if (department_ != &::google::protobuf::internal::kEmptyString) {
        department_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    post_date_ = GOOGLE_LONGLONG(0);
    if (has_debug_data()) {
      if (debug_data_ != &::google::protobuf::internal::kEmptyString) {
        debug_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobSearchResult_ResultItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 jid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jid_)));
          set_has_jid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_score;
        break;
      }
      
      // optional double score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }
      
      // optional bytes title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_location;
        break;
      }
      
      // optional bytes location = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_company_id;
        break;
      }
      
      // optional int64 company_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_company_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &company_id_)));
          set_has_company_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_company_name;
        break;
      }
      
      // optional bytes company_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_company_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_company_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_company_image;
        break;
      }
      
      // optional bytes company_image = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_company_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_company_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_department;
        break;
      }
      
      // optional bytes department = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_department:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_department()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_post_date;
        break;
      }
      
      // optional int64 post_date = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_post_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &post_date_)));
          set_has_post_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_debug_data;
        break;
      }
      
      // optional bytes debug_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_debug_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JobSearchResult_ResultItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 jid = 1;
  if (has_jid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->jid(), output);
  }
  
  // optional double score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->score(), output);
  }
  
  // optional bytes title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->title(), output);
  }
  
  // optional bytes location = 4;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->location(), output);
  }
  
  // optional int64 company_id = 5;
  if (has_company_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->company_id(), output);
  }
  
  // optional bytes company_name = 6;
  if (has_company_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->company_name(), output);
  }
  
  // optional bytes company_image = 7;
  if (has_company_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->company_image(), output);
  }
  
  // optional bytes department = 8;
  if (has_department()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->department(), output);
  }
  
  // optional int64 post_date = 9;
  if (has_post_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->post_date(), output);
  }
  
  // optional bytes debug_data = 10;
  if (has_debug_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->debug_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JobSearchResult_ResultItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 jid = 1;
  if (has_jid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->jid(), target);
  }
  
  // optional double score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->score(), target);
  }
  
  // optional bytes title = 3;
  if (has_title()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->title(), target);
  }
  
  // optional bytes location = 4;
  if (has_location()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->location(), target);
  }
  
  // optional int64 company_id = 5;
  if (has_company_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->company_id(), target);
  }
  
  // optional bytes company_name = 6;
  if (has_company_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->company_name(), target);
  }
  
  // optional bytes company_image = 7;
  if (has_company_image()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->company_image(), target);
  }
  
  // optional bytes department = 8;
  if (has_department()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->department(), target);
  }
  
  // optional int64 post_date = 9;
  if (has_post_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->post_date(), target);
  }
  
  // optional bytes debug_data = 10;
  if (has_debug_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->debug_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JobSearchResult_ResultItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 jid = 1;
    if (has_jid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jid());
    }
    
    // optional double score = 2;
    if (has_score()) {
      total_size += 1 + 8;
    }
    
    // optional bytes title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->title());
    }
    
    // optional bytes location = 4;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->location());
    }
    
    // optional int64 company_id = 5;
    if (has_company_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->company_id());
    }
    
    // optional bytes company_name = 6;
    if (has_company_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->company_name());
    }
    
    // optional bytes company_image = 7;
    if (has_company_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->company_image());
    }
    
    // optional bytes department = 8;
    if (has_department()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->department());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 post_date = 9;
    if (has_post_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->post_date());
    }
    
    // optional bytes debug_data = 10;
    if (has_debug_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->debug_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobSearchResult_ResultItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobSearchResult_ResultItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobSearchResult_ResultItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobSearchResult_ResultItem::MergeFrom(const JobSearchResult_ResultItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_jid()) {
      set_jid(from.jid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
    if (from.has_company_id()) {
      set_company_id(from.company_id());
    }
    if (from.has_company_name()) {
      set_company_name(from.company_name());
    }
    if (from.has_company_image()) {
      set_company_image(from.company_image());
    }
    if (from.has_department()) {
      set_department(from.department());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_post_date()) {
      set_post_date(from.post_date());
    }
    if (from.has_debug_data()) {
      set_debug_data(from.debug_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobSearchResult_ResultItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobSearchResult_ResultItem::CopyFrom(const JobSearchResult_ResultItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobSearchResult_ResultItem::IsInitialized() const {
  
  return true;
}

void JobSearchResult_ResultItem::Swap(JobSearchResult_ResultItem* other) {
  if (other != this) {
    std::swap(jid_, other->jid_);
    std::swap(score_, other->score_);
    std::swap(title_, other->title_);
    std::swap(location_, other->location_);
    std::swap(company_id_, other->company_id_);
    std::swap(company_name_, other->company_name_);
    std::swap(company_image_, other->company_image_);
    std::swap(department_, other->department_);
    std::swap(post_date_, other->post_date_);
    std::swap(debug_data_, other->debug_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobSearchResult_ResultItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobSearchResult_ResultItem_descriptor_;
  metadata.reflection = JobSearchResult_ResultItem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int JobSearchResult_StatsItem::kStatsTypeFieldNumber;
const int JobSearchResult_StatsItem::kStatsKeyFieldNumber;
const int JobSearchResult_StatsItem::kStatsNameFieldNumber;
const int JobSearchResult_StatsItem::kStatsValueFieldNumber;
#endif  // !_MSC_VER

JobSearchResult_StatsItem::JobSearchResult_StatsItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JobSearchResult_StatsItem::InitAsDefaultInstance() {
}

JobSearchResult_StatsItem::JobSearchResult_StatsItem(const JobSearchResult_StatsItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JobSearchResult_StatsItem::SharedCtor() {
  _cached_size_ = 0;
  stats_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stats_key_ = GOOGLE_ULONGLONG(0);
  stats_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stats_value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobSearchResult_StatsItem::~JobSearchResult_StatsItem() {
  SharedDtor();
}

void JobSearchResult_StatsItem::SharedDtor() {
  if (stats_type_ != &::google::protobuf::internal::kEmptyString) {
    delete stats_type_;
  }
  if (stats_name_ != &::google::protobuf::internal::kEmptyString) {
    delete stats_name_;
  }
  if (this != default_instance_) {
  }
}

void JobSearchResult_StatsItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobSearchResult_StatsItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobSearchResult_StatsItem_descriptor_;
}

const JobSearchResult_StatsItem& JobSearchResult_StatsItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_JobSearchResult_2eproto();  return *default_instance_;
}

JobSearchResult_StatsItem* JobSearchResult_StatsItem::default_instance_ = NULL;

JobSearchResult_StatsItem* JobSearchResult_StatsItem::New() const {
  return new JobSearchResult_StatsItem;
}

void JobSearchResult_StatsItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stats_type()) {
      if (stats_type_ != &::google::protobuf::internal::kEmptyString) {
        stats_type_->clear();
      }
    }
    stats_key_ = GOOGLE_ULONGLONG(0);
    if (has_stats_name()) {
      if (stats_name_ != &::google::protobuf::internal::kEmptyString) {
        stats_name_->clear();
      }
    }
    stats_value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobSearchResult_StatsItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes stats_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stats_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stats_key;
        break;
      }
      
      // optional uint64 stats_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stats_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stats_key_)));
          set_has_stats_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stats_value;
        break;
      }
      
      // optional uint64 stats_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stats_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stats_value_)));
          set_has_stats_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stats_name;
        break;
      }
      
      // optional bytes stats_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_stats_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JobSearchResult_StatsItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes stats_type = 1;
  if (has_stats_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->stats_type(), output);
  }
  
  // optional uint64 stats_key = 2;
  if (has_stats_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stats_key(), output);
  }
  
  // optional uint64 stats_value = 3;
  if (has_stats_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->stats_value(), output);
  }
  
  // optional bytes stats_name = 4;
  if (has_stats_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->stats_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JobSearchResult_StatsItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes stats_type = 1;
  if (has_stats_type()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->stats_type(), target);
  }
  
  // optional uint64 stats_key = 2;
  if (has_stats_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->stats_key(), target);
  }
  
  // optional uint64 stats_value = 3;
  if (has_stats_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->stats_value(), target);
  }
  
  // optional bytes stats_name = 4;
  if (has_stats_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->stats_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JobSearchResult_StatsItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes stats_type = 1;
    if (has_stats_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stats_type());
    }
    
    // optional uint64 stats_key = 2;
    if (has_stats_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stats_key());
    }
    
    // optional bytes stats_name = 4;
    if (has_stats_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->stats_name());
    }
    
    // optional uint64 stats_value = 3;
    if (has_stats_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stats_value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobSearchResult_StatsItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobSearchResult_StatsItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobSearchResult_StatsItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobSearchResult_StatsItem::MergeFrom(const JobSearchResult_StatsItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stats_type()) {
      set_stats_type(from.stats_type());
    }
    if (from.has_stats_key()) {
      set_stats_key(from.stats_key());
    }
    if (from.has_stats_name()) {
      set_stats_name(from.stats_name());
    }
    if (from.has_stats_value()) {
      set_stats_value(from.stats_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobSearchResult_StatsItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobSearchResult_StatsItem::CopyFrom(const JobSearchResult_StatsItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobSearchResult_StatsItem::IsInitialized() const {
  
  return true;
}

void JobSearchResult_StatsItem::Swap(JobSearchResult_StatsItem* other) {
  if (other != this) {
    std::swap(stats_type_, other->stats_type_);
    std::swap(stats_key_, other->stats_key_);
    std::swap(stats_name_, other->stats_name_);
    std::swap(stats_value_, other->stats_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobSearchResult_StatsItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobSearchResult_StatsItem_descriptor_;
  metadata.reflection = JobSearchResult_StatsItem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int JobSearchResult::kOffsetFieldNumber;
const int JobSearchResult::kCountFieldNumber;
const int JobSearchResult::kTotalEstimatedFieldNumber;
const int JobSearchResult::kResultItemFieldNumber;
const int JobSearchResult::kStatsItemFieldNumber;
#endif  // !_MSC_VER

JobSearchResult::JobSearchResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JobSearchResult::InitAsDefaultInstance() {
}

JobSearchResult::JobSearchResult(const JobSearchResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JobSearchResult::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  count_ = 0;
  total_estimated_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobSearchResult::~JobSearchResult() {
  SharedDtor();
}

void JobSearchResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JobSearchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobSearchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobSearchResult_descriptor_;
}

const JobSearchResult& JobSearchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_JobSearchResult_2eproto();  return *default_instance_;
}

JobSearchResult* JobSearchResult::default_instance_ = NULL;

JobSearchResult* JobSearchResult::New() const {
  return new JobSearchResult;
}

void JobSearchResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = 0;
    count_ = 0;
    total_estimated_ = 0;
  }
  result_item_.Clear();
  stats_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobSearchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_estimated;
        break;
      }
      
      // optional int32 total_estimated = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_estimated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_estimated_)));
          set_has_total_estimated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_result_item;
        break;
      }
      
      // repeated .job_search.JobSearchResult.ResultItem result_item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_result_item;
        if (input->ExpectTag(42)) goto parse_stats_item;
        break;
      }
      
      // repeated .job_search.JobSearchResult.StatsItem stats_item = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stats_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JobSearchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  // optional int32 total_estimated = 3;
  if (has_total_estimated()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_estimated(), output);
  }
  
  // repeated .job_search.JobSearchResult.ResultItem result_item = 4;
  for (int i = 0; i < this->result_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->result_item(i), output);
  }
  
  // repeated .job_search.JobSearchResult.StatsItem stats_item = 5;
  for (int i = 0; i < this->stats_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stats_item(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JobSearchResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  // optional int32 total_estimated = 3;
  if (has_total_estimated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_estimated(), target);
  }
  
  // repeated .job_search.JobSearchResult.ResultItem result_item = 4;
  for (int i = 0; i < this->result_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->result_item(i), target);
  }
  
  // repeated .job_search.JobSearchResult.StatsItem stats_item = 5;
  for (int i = 0; i < this->stats_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stats_item(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JobSearchResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // optional int32 total_estimated = 3;
    if (has_total_estimated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_estimated());
    }
    
  }
  // repeated .job_search.JobSearchResult.ResultItem result_item = 4;
  total_size += 1 * this->result_item_size();
  for (int i = 0; i < this->result_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result_item(i));
  }
  
  // repeated .job_search.JobSearchResult.StatsItem stats_item = 5;
  total_size += 1 * this->stats_item_size();
  for (int i = 0; i < this->stats_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats_item(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobSearchResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobSearchResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobSearchResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobSearchResult::MergeFrom(const JobSearchResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_item_.MergeFrom(from.result_item_);
  stats_item_.MergeFrom(from.stats_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_total_estimated()) {
      set_total_estimated(from.total_estimated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobSearchResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobSearchResult::CopyFrom(const JobSearchResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobSearchResult::IsInitialized() const {
  
  return true;
}

void JobSearchResult::Swap(JobSearchResult* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(count_, other->count_);
    std::swap(total_estimated_, other->total_estimated_);
    result_item_.Swap(&other->result_item_);
    stats_item_.Swap(&other->stats_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobSearchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobSearchResult_descriptor_;
  metadata.reflection = JobSearchResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace job_search

// @@protoc_insertion_point(global_scope)
