// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UserSearchQuery.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace user_search {

namespace {

const ::google::protobuf::Descriptor* PbUserSearchQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbUserSearchQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbUserSearchQuery_TermExpansion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbUserSearchQuery_TermExpansion_reflection_ = NULL;
const ::google::protobuf::Descriptor* PbUserSearchQuery_LinkDistanceFilter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PbUserSearchQuery_LinkDistanceFilter_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_UserSearchQuery_2eproto() {
  protobuf_AddDesc_UserSearchQuery_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UserSearchQuery.proto");
  GOOGLE_CHECK(file != NULL);
  PbUserSearchQuery_descriptor_ = file->message_type(0);
  static const int PbUserSearchQuery_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery, xapian_query_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery, searcher_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery, d1_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery, d2_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery, te_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery, search_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery, link_distance_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery, stats_com_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery, stats_job_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery, stats_tag_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery, stats_sch_term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery, task_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery, searcher_company_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery, filter_company_1du_contacts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery, filter_non_company_1du_contacts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery, debug_),
  };
  PbUserSearchQuery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbUserSearchQuery_descriptor_,
      PbUserSearchQuery::default_instance_,
      PbUserSearchQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbUserSearchQuery));
  PbUserSearchQuery_TermExpansion_descriptor_ = PbUserSearchQuery_descriptor_->nested_type(0);
  static const int PbUserSearchQuery_TermExpansion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery_TermExpansion, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery_TermExpansion, eterm_),
  };
  PbUserSearchQuery_TermExpansion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbUserSearchQuery_TermExpansion_descriptor_,
      PbUserSearchQuery_TermExpansion::default_instance_,
      PbUserSearchQuery_TermExpansion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery_TermExpansion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery_TermExpansion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbUserSearchQuery_TermExpansion));
  PbUserSearchQuery_LinkDistanceFilter_descriptor_ = PbUserSearchQuery_descriptor_->nested_type(1);
  static const int PbUserSearchQuery_LinkDistanceFilter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery_LinkDistanceFilter, link_1du_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery_LinkDistanceFilter, link_2du_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery_LinkDistanceFilter, link_xdu_),
  };
  PbUserSearchQuery_LinkDistanceFilter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PbUserSearchQuery_LinkDistanceFilter_descriptor_,
      PbUserSearchQuery_LinkDistanceFilter::default_instance_,
      PbUserSearchQuery_LinkDistanceFilter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery_LinkDistanceFilter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PbUserSearchQuery_LinkDistanceFilter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PbUserSearchQuery_LinkDistanceFilter));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UserSearchQuery_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbUserSearchQuery_descriptor_, &PbUserSearchQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbUserSearchQuery_TermExpansion_descriptor_, &PbUserSearchQuery_TermExpansion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PbUserSearchQuery_LinkDistanceFilter_descriptor_, &PbUserSearchQuery_LinkDistanceFilter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UserSearchQuery_2eproto() {
  delete PbUserSearchQuery::default_instance_;
  delete PbUserSearchQuery_reflection_;
  delete PbUserSearchQuery_TermExpansion::default_instance_;
  delete PbUserSearchQuery_TermExpansion_reflection_;
  delete PbUserSearchQuery_LinkDistanceFilter::default_instance_;
  delete PbUserSearchQuery_LinkDistanceFilter_reflection_;
}

void protobuf_AddDesc_UserSearchQuery_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025UserSearchQuery.proto\022\013user_search\"\214\005\n"
    "\021PbUserSearchQuery\022\016\n\006offset\030\001 \001(\005\022\r\n\005co"
    "unt\030\002 \001(\005\022\031\n\021xapian_query_blob\030\003 \002(\014\022\024\n\014"
    "searcher_uid\030\005 \001(\003\022\016\n\006d1_uid\030\006 \003(\003\022\016\n\006d2"
    "_uid\030\007 \003(\003\0228\n\002te\030\010 \003(\0132,.user_search.PbU"
    "serSearchQuery.TermExpansion\022\023\n\013search_t"
    "ype\030\t \001(\005\022O\n\024link_distance_filter\030\n \001(\0132"
    "1.user_search.PbUserSearchQuery.LinkDist"
    "anceFilter\022\026\n\016stats_com_term\030\r \003(\004\022\026\n\016st"
    "ats_job_term\030\016 \003(\004\022\026\n\016stats_tag_term\030\017 \003"
    "(\004\022\026\n\016stats_sch_term\030\020 \003(\004\022\021\n\ttask_type\030"
    "\021 \001(\005\022\035\n\025searcher_company_name\030\023 \001(\014\022#\n\033"
    "filter_company_1du_contacts\030\024 \001(\010\022\'\n\037fil"
    "ter_non_company_1du_contacts\030\025 \001(\010\022\r\n\005de"
    "bug\030\022 \001(\010\032,\n\rTermExpansion\022\014\n\004term\030\001 \002(\014"
    "\022\r\n\005eterm\030\002 \003(\014\032J\n\022LinkDistanceFilter\022\020\n"
    "\010link_1du\030\001 \001(\010\022\020\n\010link_2du\030\002 \001(\010\022\020\n\010lin"
    "k_xdu\030\003 \001(\010", 691);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UserSearchQuery.proto", &protobuf_RegisterTypes);
  PbUserSearchQuery::default_instance_ = new PbUserSearchQuery();
  PbUserSearchQuery_TermExpansion::default_instance_ = new PbUserSearchQuery_TermExpansion();
  PbUserSearchQuery_LinkDistanceFilter::default_instance_ = new PbUserSearchQuery_LinkDistanceFilter();
  PbUserSearchQuery::default_instance_->InitAsDefaultInstance();
  PbUserSearchQuery_TermExpansion::default_instance_->InitAsDefaultInstance();
  PbUserSearchQuery_LinkDistanceFilter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UserSearchQuery_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UserSearchQuery_2eproto {
  StaticDescriptorInitializer_UserSearchQuery_2eproto() {
    protobuf_AddDesc_UserSearchQuery_2eproto();
  }
} static_descriptor_initializer_UserSearchQuery_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PbUserSearchQuery_TermExpansion::kTermFieldNumber;
const int PbUserSearchQuery_TermExpansion::kEtermFieldNumber;
#endif  // !_MSC_VER

PbUserSearchQuery_TermExpansion::PbUserSearchQuery_TermExpansion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbUserSearchQuery_TermExpansion::InitAsDefaultInstance() {
}

PbUserSearchQuery_TermExpansion::PbUserSearchQuery_TermExpansion(const PbUserSearchQuery_TermExpansion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbUserSearchQuery_TermExpansion::SharedCtor() {
  _cached_size_ = 0;
  term_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbUserSearchQuery_TermExpansion::~PbUserSearchQuery_TermExpansion() {
  SharedDtor();
}

void PbUserSearchQuery_TermExpansion::SharedDtor() {
  if (term_ != &::google::protobuf::internal::kEmptyString) {
    delete term_;
  }
  if (this != default_instance_) {
  }
}

void PbUserSearchQuery_TermExpansion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbUserSearchQuery_TermExpansion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbUserSearchQuery_TermExpansion_descriptor_;
}

const PbUserSearchQuery_TermExpansion& PbUserSearchQuery_TermExpansion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserSearchQuery_2eproto();  return *default_instance_;
}

PbUserSearchQuery_TermExpansion* PbUserSearchQuery_TermExpansion::default_instance_ = NULL;

PbUserSearchQuery_TermExpansion* PbUserSearchQuery_TermExpansion::New() const {
  return new PbUserSearchQuery_TermExpansion;
}

void PbUserSearchQuery_TermExpansion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_term()) {
      if (term_ != &::google::protobuf::internal::kEmptyString) {
        term_->clear();
      }
    }
  }
  eterm_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbUserSearchQuery_TermExpansion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes term = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_term()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eterm;
        break;
      }
      
      // repeated bytes eterm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eterm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_eterm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eterm;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbUserSearchQuery_TermExpansion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes term = 1;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->term(), output);
  }
  
  // repeated bytes eterm = 2;
  for (int i = 0; i < this->eterm_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->eterm(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbUserSearchQuery_TermExpansion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes term = 1;
  if (has_term()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->term(), target);
  }
  
  // repeated bytes eterm = 2;
  for (int i = 0; i < this->eterm_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->eterm(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbUserSearchQuery_TermExpansion::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes term = 1;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->term());
    }
    
  }
  // repeated bytes eterm = 2;
  total_size += 1 * this->eterm_size();
  for (int i = 0; i < this->eterm_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->eterm(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbUserSearchQuery_TermExpansion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbUserSearchQuery_TermExpansion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbUserSearchQuery_TermExpansion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbUserSearchQuery_TermExpansion::MergeFrom(const PbUserSearchQuery_TermExpansion& from) {
  GOOGLE_CHECK_NE(&from, this);
  eterm_.MergeFrom(from.eterm_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term()) {
      set_term(from.term());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbUserSearchQuery_TermExpansion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbUserSearchQuery_TermExpansion::CopyFrom(const PbUserSearchQuery_TermExpansion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbUserSearchQuery_TermExpansion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PbUserSearchQuery_TermExpansion::Swap(PbUserSearchQuery_TermExpansion* other) {
  if (other != this) {
    std::swap(term_, other->term_);
    eterm_.Swap(&other->eterm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbUserSearchQuery_TermExpansion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbUserSearchQuery_TermExpansion_descriptor_;
  metadata.reflection = PbUserSearchQuery_TermExpansion_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PbUserSearchQuery_LinkDistanceFilter::kLink1DuFieldNumber;
const int PbUserSearchQuery_LinkDistanceFilter::kLink2DuFieldNumber;
const int PbUserSearchQuery_LinkDistanceFilter::kLinkXduFieldNumber;
#endif  // !_MSC_VER

PbUserSearchQuery_LinkDistanceFilter::PbUserSearchQuery_LinkDistanceFilter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbUserSearchQuery_LinkDistanceFilter::InitAsDefaultInstance() {
}

PbUserSearchQuery_LinkDistanceFilter::PbUserSearchQuery_LinkDistanceFilter(const PbUserSearchQuery_LinkDistanceFilter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbUserSearchQuery_LinkDistanceFilter::SharedCtor() {
  _cached_size_ = 0;
  link_1du_ = false;
  link_2du_ = false;
  link_xdu_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbUserSearchQuery_LinkDistanceFilter::~PbUserSearchQuery_LinkDistanceFilter() {
  SharedDtor();
}

void PbUserSearchQuery_LinkDistanceFilter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PbUserSearchQuery_LinkDistanceFilter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbUserSearchQuery_LinkDistanceFilter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbUserSearchQuery_LinkDistanceFilter_descriptor_;
}

const PbUserSearchQuery_LinkDistanceFilter& PbUserSearchQuery_LinkDistanceFilter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserSearchQuery_2eproto();  return *default_instance_;
}

PbUserSearchQuery_LinkDistanceFilter* PbUserSearchQuery_LinkDistanceFilter::default_instance_ = NULL;

PbUserSearchQuery_LinkDistanceFilter* PbUserSearchQuery_LinkDistanceFilter::New() const {
  return new PbUserSearchQuery_LinkDistanceFilter;
}

void PbUserSearchQuery_LinkDistanceFilter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    link_1du_ = false;
    link_2du_ = false;
    link_xdu_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbUserSearchQuery_LinkDistanceFilter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool link_1du = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &link_1du_)));
          set_has_link_1du();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_link_2du;
        break;
      }
      
      // optional bool link_2du = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_link_2du:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &link_2du_)));
          set_has_link_2du();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_link_xdu;
        break;
      }
      
      // optional bool link_xdu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_link_xdu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &link_xdu_)));
          set_has_link_xdu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbUserSearchQuery_LinkDistanceFilter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool link_1du = 1;
  if (has_link_1du()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->link_1du(), output);
  }
  
  // optional bool link_2du = 2;
  if (has_link_2du()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->link_2du(), output);
  }
  
  // optional bool link_xdu = 3;
  if (has_link_xdu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->link_xdu(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbUserSearchQuery_LinkDistanceFilter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool link_1du = 1;
  if (has_link_1du()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->link_1du(), target);
  }
  
  // optional bool link_2du = 2;
  if (has_link_2du()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->link_2du(), target);
  }
  
  // optional bool link_xdu = 3;
  if (has_link_xdu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->link_xdu(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbUserSearchQuery_LinkDistanceFilter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool link_1du = 1;
    if (has_link_1du()) {
      total_size += 1 + 1;
    }
    
    // optional bool link_2du = 2;
    if (has_link_2du()) {
      total_size += 1 + 1;
    }
    
    // optional bool link_xdu = 3;
    if (has_link_xdu()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbUserSearchQuery_LinkDistanceFilter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbUserSearchQuery_LinkDistanceFilter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbUserSearchQuery_LinkDistanceFilter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbUserSearchQuery_LinkDistanceFilter::MergeFrom(const PbUserSearchQuery_LinkDistanceFilter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_link_1du()) {
      set_link_1du(from.link_1du());
    }
    if (from.has_link_2du()) {
      set_link_2du(from.link_2du());
    }
    if (from.has_link_xdu()) {
      set_link_xdu(from.link_xdu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbUserSearchQuery_LinkDistanceFilter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbUserSearchQuery_LinkDistanceFilter::CopyFrom(const PbUserSearchQuery_LinkDistanceFilter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbUserSearchQuery_LinkDistanceFilter::IsInitialized() const {
  
  return true;
}

void PbUserSearchQuery_LinkDistanceFilter::Swap(PbUserSearchQuery_LinkDistanceFilter* other) {
  if (other != this) {
    std::swap(link_1du_, other->link_1du_);
    std::swap(link_2du_, other->link_2du_);
    std::swap(link_xdu_, other->link_xdu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbUserSearchQuery_LinkDistanceFilter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbUserSearchQuery_LinkDistanceFilter_descriptor_;
  metadata.reflection = PbUserSearchQuery_LinkDistanceFilter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PbUserSearchQuery::kOffsetFieldNumber;
const int PbUserSearchQuery::kCountFieldNumber;
const int PbUserSearchQuery::kXapianQueryBlobFieldNumber;
const int PbUserSearchQuery::kSearcherUidFieldNumber;
const int PbUserSearchQuery::kD1UidFieldNumber;
const int PbUserSearchQuery::kD2UidFieldNumber;
const int PbUserSearchQuery::kTeFieldNumber;
const int PbUserSearchQuery::kSearchTypeFieldNumber;
const int PbUserSearchQuery::kLinkDistanceFilterFieldNumber;
const int PbUserSearchQuery::kStatsComTermFieldNumber;
const int PbUserSearchQuery::kStatsJobTermFieldNumber;
const int PbUserSearchQuery::kStatsTagTermFieldNumber;
const int PbUserSearchQuery::kStatsSchTermFieldNumber;
const int PbUserSearchQuery::kTaskTypeFieldNumber;
const int PbUserSearchQuery::kSearcherCompanyNameFieldNumber;
const int PbUserSearchQuery::kFilterCompany1DuContactsFieldNumber;
const int PbUserSearchQuery::kFilterNonCompany1DuContactsFieldNumber;
const int PbUserSearchQuery::kDebugFieldNumber;
#endif  // !_MSC_VER

PbUserSearchQuery::PbUserSearchQuery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PbUserSearchQuery::InitAsDefaultInstance() {
  link_distance_filter_ = const_cast< ::user_search::PbUserSearchQuery_LinkDistanceFilter*>(&::user_search::PbUserSearchQuery_LinkDistanceFilter::default_instance());
}

PbUserSearchQuery::PbUserSearchQuery(const PbUserSearchQuery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PbUserSearchQuery::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  count_ = 0;
  xapian_query_blob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  searcher_uid_ = GOOGLE_LONGLONG(0);
  search_type_ = 0;
  link_distance_filter_ = NULL;
  task_type_ = 0;
  searcher_company_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filter_company_1du_contacts_ = false;
  filter_non_company_1du_contacts_ = false;
  debug_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PbUserSearchQuery::~PbUserSearchQuery() {
  SharedDtor();
}

void PbUserSearchQuery::SharedDtor() {
  if (xapian_query_blob_ != &::google::protobuf::internal::kEmptyString) {
    delete xapian_query_blob_;
  }
  if (searcher_company_name_ != &::google::protobuf::internal::kEmptyString) {
    delete searcher_company_name_;
  }
  if (this != default_instance_) {
    delete link_distance_filter_;
  }
}

void PbUserSearchQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PbUserSearchQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PbUserSearchQuery_descriptor_;
}

const PbUserSearchQuery& PbUserSearchQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserSearchQuery_2eproto();  return *default_instance_;
}

PbUserSearchQuery* PbUserSearchQuery::default_instance_ = NULL;

PbUserSearchQuery* PbUserSearchQuery::New() const {
  return new PbUserSearchQuery;
}

void PbUserSearchQuery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = 0;
    count_ = 0;
    if (has_xapian_query_blob()) {
      if (xapian_query_blob_ != &::google::protobuf::internal::kEmptyString) {
        xapian_query_blob_->clear();
      }
    }
    searcher_uid_ = GOOGLE_LONGLONG(0);
    search_type_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_link_distance_filter()) {
      if (link_distance_filter_ != NULL) link_distance_filter_->::user_search::PbUserSearchQuery_LinkDistanceFilter::Clear();
    }
    task_type_ = 0;
    if (has_searcher_company_name()) {
      if (searcher_company_name_ != &::google::protobuf::internal::kEmptyString) {
        searcher_company_name_->clear();
      }
    }
    filter_company_1du_contacts_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    filter_non_company_1du_contacts_ = false;
    debug_ = false;
  }
  d1_uid_.Clear();
  d2_uid_.Clear();
  te_.Clear();
  stats_com_term_.Clear();
  stats_job_term_.Clear();
  stats_tag_term_.Clear();
  stats_sch_term_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PbUserSearchQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_xapian_query_blob;
        break;
      }
      
      // required bytes xapian_query_blob = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_xapian_query_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_xapian_query_blob()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_searcher_uid;
        break;
      }
      
      // optional int64 searcher_uid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_searcher_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &searcher_uid_)));
          set_has_searcher_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_d1_uid;
        break;
      }
      
      // repeated int64 d1_uid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_d1_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48, input, this->mutable_d1_uid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_d1_uid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_d1_uid;
        if (input->ExpectTag(56)) goto parse_d2_uid;
        break;
      }
      
      // repeated int64 d2_uid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_d2_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 56, input, this->mutable_d2_uid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_d2_uid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_d2_uid;
        if (input->ExpectTag(66)) goto parse_te;
        break;
      }
      
      // repeated .user_search.PbUserSearchQuery.TermExpansion te = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_te:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_te()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_te;
        if (input->ExpectTag(72)) goto parse_search_type;
        break;
      }
      
      // optional int32 search_type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_search_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &search_type_)));
          set_has_search_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_link_distance_filter;
        break;
      }
      
      // optional .user_search.PbUserSearchQuery.LinkDistanceFilter link_distance_filter = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_link_distance_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_link_distance_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_stats_com_term;
        break;
      }
      
      // repeated uint64 stats_com_term = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stats_com_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 104, input, this->mutable_stats_com_term())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_stats_com_term())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_stats_com_term;
        if (input->ExpectTag(112)) goto parse_stats_job_term;
        break;
      }
      
      // repeated uint64 stats_job_term = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stats_job_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 112, input, this->mutable_stats_job_term())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_stats_job_term())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_stats_job_term;
        if (input->ExpectTag(120)) goto parse_stats_tag_term;
        break;
      }
      
      // repeated uint64 stats_tag_term = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stats_tag_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 120, input, this->mutable_stats_tag_term())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_stats_tag_term())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_stats_tag_term;
        if (input->ExpectTag(128)) goto parse_stats_sch_term;
        break;
      }
      
      // repeated uint64 stats_sch_term = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stats_sch_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 128, input, this->mutable_stats_sch_term())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_stats_sch_term())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_stats_sch_term;
        if (input->ExpectTag(136)) goto parse_task_type;
        break;
      }
      
      // optional int32 task_type = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_type_)));
          set_has_task_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_debug;
        break;
      }
      
      // optional bool debug = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_debug:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &debug_)));
          set_has_debug();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_searcher_company_name;
        break;
      }
      
      // optional bytes searcher_company_name = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_searcher_company_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_searcher_company_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_filter_company_1du_contacts;
        break;
      }
      
      // optional bool filter_company_1du_contacts = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_company_1du_contacts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_company_1du_contacts_)));
          set_has_filter_company_1du_contacts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_filter_non_company_1du_contacts;
        break;
      }
      
      // optional bool filter_non_company_1du_contacts = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_filter_non_company_1du_contacts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &filter_non_company_1du_contacts_)));
          set_has_filter_non_company_1du_contacts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PbUserSearchQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }
  
  // required bytes xapian_query_blob = 3;
  if (has_xapian_query_blob()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->xapian_query_blob(), output);
  }
  
  // optional int64 searcher_uid = 5;
  if (has_searcher_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->searcher_uid(), output);
  }
  
  // repeated int64 d1_uid = 6;
  for (int i = 0; i < this->d1_uid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->d1_uid(i), output);
  }
  
  // repeated int64 d2_uid = 7;
  for (int i = 0; i < this->d2_uid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      7, this->d2_uid(i), output);
  }
  
  // repeated .user_search.PbUserSearchQuery.TermExpansion te = 8;
  for (int i = 0; i < this->te_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->te(i), output);
  }
  
  // optional int32 search_type = 9;
  if (has_search_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->search_type(), output);
  }
  
  // optional .user_search.PbUserSearchQuery.LinkDistanceFilter link_distance_filter = 10;
  if (has_link_distance_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->link_distance_filter(), output);
  }
  
  // repeated uint64 stats_com_term = 13;
  for (int i = 0; i < this->stats_com_term_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      13, this->stats_com_term(i), output);
  }
  
  // repeated uint64 stats_job_term = 14;
  for (int i = 0; i < this->stats_job_term_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      14, this->stats_job_term(i), output);
  }
  
  // repeated uint64 stats_tag_term = 15;
  for (int i = 0; i < this->stats_tag_term_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      15, this->stats_tag_term(i), output);
  }
  
  // repeated uint64 stats_sch_term = 16;
  for (int i = 0; i < this->stats_sch_term_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      16, this->stats_sch_term(i), output);
  }
  
  // optional int32 task_type = 17;
  if (has_task_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->task_type(), output);
  }
  
  // optional bool debug = 18;
  if (has_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->debug(), output);
  }
  
  // optional bytes searcher_company_name = 19;
  if (has_searcher_company_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      19, this->searcher_company_name(), output);
  }
  
  // optional bool filter_company_1du_contacts = 20;
  if (has_filter_company_1du_contacts()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->filter_company_1du_contacts(), output);
  }
  
  // optional bool filter_non_company_1du_contacts = 21;
  if (has_filter_non_company_1du_contacts()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->filter_non_company_1du_contacts(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PbUserSearchQuery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }
  
  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }
  
  // required bytes xapian_query_blob = 3;
  if (has_xapian_query_blob()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->xapian_query_blob(), target);
  }
  
  // optional int64 searcher_uid = 5;
  if (has_searcher_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->searcher_uid(), target);
  }
  
  // repeated int64 d1_uid = 6;
  for (int i = 0; i < this->d1_uid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(6, this->d1_uid(i), target);
  }
  
  // repeated int64 d2_uid = 7;
  for (int i = 0; i < this->d2_uid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(7, this->d2_uid(i), target);
  }
  
  // repeated .user_search.PbUserSearchQuery.TermExpansion te = 8;
  for (int i = 0; i < this->te_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->te(i), target);
  }
  
  // optional int32 search_type = 9;
  if (has_search_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->search_type(), target);
  }
  
  // optional .user_search.PbUserSearchQuery.LinkDistanceFilter link_distance_filter = 10;
  if (has_link_distance_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->link_distance_filter(), target);
  }
  
  // repeated uint64 stats_com_term = 13;
  for (int i = 0; i < this->stats_com_term_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(13, this->stats_com_term(i), target);
  }
  
  // repeated uint64 stats_job_term = 14;
  for (int i = 0; i < this->stats_job_term_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(14, this->stats_job_term(i), target);
  }
  
  // repeated uint64 stats_tag_term = 15;
  for (int i = 0; i < this->stats_tag_term_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(15, this->stats_tag_term(i), target);
  }
  
  // repeated uint64 stats_sch_term = 16;
  for (int i = 0; i < this->stats_sch_term_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(16, this->stats_sch_term(i), target);
  }
  
  // optional int32 task_type = 17;
  if (has_task_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->task_type(), target);
  }
  
  // optional bool debug = 18;
  if (has_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->debug(), target);
  }
  
  // optional bytes searcher_company_name = 19;
  if (has_searcher_company_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->searcher_company_name(), target);
  }
  
  // optional bool filter_company_1du_contacts = 20;
  if (has_filter_company_1du_contacts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->filter_company_1du_contacts(), target);
  }
  
  // optional bool filter_non_company_1du_contacts = 21;
  if (has_filter_non_company_1du_contacts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->filter_non_company_1du_contacts(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PbUserSearchQuery::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }
    
    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }
    
    // required bytes xapian_query_blob = 3;
    if (has_xapian_query_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->xapian_query_blob());
    }
    
    // optional int64 searcher_uid = 5;
    if (has_searcher_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->searcher_uid());
    }
    
    // optional int32 search_type = 9;
    if (has_search_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->search_type());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .user_search.PbUserSearchQuery.LinkDistanceFilter link_distance_filter = 10;
    if (has_link_distance_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->link_distance_filter());
    }
    
    // optional int32 task_type = 17;
    if (has_task_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_type());
    }
    
    // optional bytes searcher_company_name = 19;
    if (has_searcher_company_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->searcher_company_name());
    }
    
    // optional bool filter_company_1du_contacts = 20;
    if (has_filter_company_1du_contacts()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool filter_non_company_1du_contacts = 21;
    if (has_filter_non_company_1du_contacts()) {
      total_size += 2 + 1;
    }
    
    // optional bool debug = 18;
    if (has_debug()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated int64 d1_uid = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->d1_uid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->d1_uid(i));
    }
    total_size += 1 * this->d1_uid_size() + data_size;
  }
  
  // repeated int64 d2_uid = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->d2_uid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->d2_uid(i));
    }
    total_size += 1 * this->d2_uid_size() + data_size;
  }
  
  // repeated .user_search.PbUserSearchQuery.TermExpansion te = 8;
  total_size += 1 * this->te_size();
  for (int i = 0; i < this->te_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->te(i));
  }
  
  // repeated uint64 stats_com_term = 13;
  {
    int data_size = 0;
    for (int i = 0; i < this->stats_com_term_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->stats_com_term(i));
    }
    total_size += 1 * this->stats_com_term_size() + data_size;
  }
  
  // repeated uint64 stats_job_term = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->stats_job_term_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->stats_job_term(i));
    }
    total_size += 1 * this->stats_job_term_size() + data_size;
  }
  
  // repeated uint64 stats_tag_term = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->stats_tag_term_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->stats_tag_term(i));
    }
    total_size += 1 * this->stats_tag_term_size() + data_size;
  }
  
  // repeated uint64 stats_sch_term = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->stats_sch_term_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->stats_sch_term(i));
    }
    total_size += 2 * this->stats_sch_term_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PbUserSearchQuery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PbUserSearchQuery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PbUserSearchQuery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PbUserSearchQuery::MergeFrom(const PbUserSearchQuery& from) {
  GOOGLE_CHECK_NE(&from, this);
  d1_uid_.MergeFrom(from.d1_uid_);
  d2_uid_.MergeFrom(from.d2_uid_);
  te_.MergeFrom(from.te_);
  stats_com_term_.MergeFrom(from.stats_com_term_);
  stats_job_term_.MergeFrom(from.stats_job_term_);
  stats_tag_term_.MergeFrom(from.stats_tag_term_);
  stats_sch_term_.MergeFrom(from.stats_sch_term_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_xapian_query_blob()) {
      set_xapian_query_blob(from.xapian_query_blob());
    }
    if (from.has_searcher_uid()) {
      set_searcher_uid(from.searcher_uid());
    }
    if (from.has_search_type()) {
      set_search_type(from.search_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_link_distance_filter()) {
      mutable_link_distance_filter()->::user_search::PbUserSearchQuery_LinkDistanceFilter::MergeFrom(from.link_distance_filter());
    }
    if (from.has_task_type()) {
      set_task_type(from.task_type());
    }
    if (from.has_searcher_company_name()) {
      set_searcher_company_name(from.searcher_company_name());
    }
    if (from.has_filter_company_1du_contacts()) {
      set_filter_company_1du_contacts(from.filter_company_1du_contacts());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_filter_non_company_1du_contacts()) {
      set_filter_non_company_1du_contacts(from.filter_non_company_1du_contacts());
    }
    if (from.has_debug()) {
      set_debug(from.debug());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PbUserSearchQuery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbUserSearchQuery::CopyFrom(const PbUserSearchQuery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbUserSearchQuery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;
  
  for (int i = 0; i < te_size(); i++) {
    if (!this->te(i).IsInitialized()) return false;
  }
  return true;
}

void PbUserSearchQuery::Swap(PbUserSearchQuery* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(count_, other->count_);
    std::swap(xapian_query_blob_, other->xapian_query_blob_);
    std::swap(searcher_uid_, other->searcher_uid_);
    d1_uid_.Swap(&other->d1_uid_);
    d2_uid_.Swap(&other->d2_uid_);
    te_.Swap(&other->te_);
    std::swap(search_type_, other->search_type_);
    std::swap(link_distance_filter_, other->link_distance_filter_);
    stats_com_term_.Swap(&other->stats_com_term_);
    stats_job_term_.Swap(&other->stats_job_term_);
    stats_tag_term_.Swap(&other->stats_tag_term_);
    stats_sch_term_.Swap(&other->stats_sch_term_);
    std::swap(task_type_, other->task_type_);
    std::swap(searcher_company_name_, other->searcher_company_name_);
    std::swap(filter_company_1du_contacts_, other->filter_company_1du_contacts_);
    std::swap(filter_non_company_1du_contacts_, other->filter_non_company_1du_contacts_);
    std::swap(debug_, other->debug_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PbUserSearchQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PbUserSearchQuery_descriptor_;
  metadata.reflection = PbUserSearchQuery_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace user_search

// @@protoc_insertion_point(global_scope)
